{"version":3,"sources":["NonoGame.js","index.js"],"names":["Field","props","useState","value","class","currentClass","isFilled","setCurrentUncovered","gameState","x","onClick","changeLives","clicked","fieldId","className","classN","Tip","Board","currentGame","initedBoard","setInitedBoard","checkIfWin","i","length","j","isUncovered","checkIfLose","countBadClick","clickOnField","y","temp","setResult","generateEndOfGameBoard","upperChangeLives","updateClass","map","item","rowId","subitem","index2","console","log","board","Lives","hearts","heartNumber","initHearts","GameResults","result","Toolbar","TipsLeft","initedTipsLeft","generateEmptyBoard","row","rowIndex","sum","resultArray","push","idx","indexOf","splice","unshift","TipsUpper","initedTipsUpper","reverse","Theme","NonoGame","emptyBoard","initBoard","Math","random","currentNumberOfHearts","setHearts","stateOfGame","setStateOfGame","sizeX","sizeY","Array","fill","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.daaf25d9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './NonoGame.css';\n\nconst LIVES_INIT = 3;\n\nfunction Field(props) {\n  const [currentClass, setCurrentClass] = useState(props.value.class);\n  const [currentFilled, setCurrentFilled] = useState(props.value.isFilled);\n  const [currentUncovered, setCurrentUncovered] = useState(false)\n\n  const [gameState, setGameState] = useState(props.gameState);\n\n  let x = '';\n  if (props.value.isFilled) {\n    x = 'x';\n  }\n\n  const handleClick = function () {\n    setCurrentUncovered(true)\n    if (props.gameState !== 'gameover') {\n      if (props.value.isFilled) {\n        props.changeLives(0);\n      } else {\n        props.changeLives(-1);\n      }\n      props.clicked(props.fieldId[0], props.fieldId[1]);\n\n    } else {\n\n    }\n  }\n  // console.log('class:',props.value.class,props.value.updateClass);\n  return (\n    <div key={props.value.class} onClick={handleClick} className={props.classN + \" \" + props.value.class + \" \" + currentClass}>{x}</div>\n  );\n}\n\nfunction Tip(props) {\n  return (\n    <div className={props.classN}>{props.value}</div>\n  );\n}\n\nfunction Board(props) {\n  const [initedBoard, setInitedBoard] = useState(props.currentGame);\n\n  const checkIfWin = function () {\n    for (let i = 0; i < initedBoard.length; i++) {\n      for (let j = 0; j < initedBoard[i].length; j++) {\n        if (initedBoard[i][j].isFilled) { //if is filled\n          if (!initedBoard[i][j].isUncovered) { //and this filled is not uncovered yet\n            return false; //it meant that it's not win state\n          }\n        }\n      }\n    }\n    return true; //if didn't return false it means it's win state\n  }\n\n  const checkIfLose = function () {\n    let countBadClick = 0;\n    for (let i = 0; i < initedBoard.length; i++) {\n      for (let j = 0; j < initedBoard[i].length; j++) {\n        if (!initedBoard[i][j].isFilled) { //if is empty\n          if (initedBoard[i][j].isUncovered) { //and this empty is uncovered\n            countBadClick++;\n            if (countBadClick >= LIVES_INIT) {\n              return true; //it meant that it's gameover\n            }\n          }\n        }\n      }\n    }\n    return false; //if didn't return true it means it's still in game state or won\n  }\n\n  const clickOnField = function (x, y) {\n    let temp = initedBoard;\n    temp[x][y].isUncovered = true;\n    if (checkIfWin() || checkIfLose()) {\n      if (temp[x][y].isUncovered) {\n        temp[x][y].class = temp[x][y].isFilled ? 'goodClick' : 'badClick';\n      } else {\n        temp[x][y].class = temp[x][y].isFilled ? 'goodClickRevealed' : 'badClickRevealed';\n      }\n    } else {\n      temp[x][y].class = temp[x][y].isFilled ? 'goodClick' : 'badClick';\n    }\n    setInitedBoard(temp);\n    if (checkIfWin()) {\n      props.setResult('You won!');\n      generateEndOfGameBoard(temp);\n    }\n    if (checkIfLose()) {\n      props.setResult('Gameover');\n      generateEndOfGameBoard(temp);\n    }\n  }\n\n  function generateEndOfGameBoard(temp) {\n    for (let i = 0; i < initedBoard.length; i++) {\n      for (let j = 0; j < initedBoard[i].length; j++) {\n        if (initedBoard[i][j].isFilled) { //if is filled\n          if (initedBoard[i][j].isUncovered) { //and this filled is not uncovered yet\n            temp[i][j].class = 'goodClick';\n          } else {\n            temp[i][j].class = 'goodClickRevealed';\n          }\n        }\n        if (!initedBoard[i][j].isFilled) { //if is filled\n          if (initedBoard[i][j].isUncovered) { //and this filled is not uncovered yet\n            temp[i][j].class = 'badClick';\n          } else {\n            temp[i][j].class = 'badClickRevealed';\n          }\n        }\n      }\n    }\n    setInitedBoard(temp);\n  }\n\n  const changeLives = function (value) {\n    props.upperChangeLives(value);\n  }\n\n  const updateClass = function (x, y) {\n    return initedBoard[x][y].class;\n  }\n\n  return (\n    <div>\n      {\n        initedBoard.map((item, rowId) => {\n          return (\n            <div className=\"row\">\n              {\n                item.map((subitem, index2) => {\n                  console.log(subitem, index2);\n                  return (\n                    <Field classN=\"field\" clicked={clickOnField} updateClass={updateClass} changeLives={changeLives} gameState={props.gameState} fieldId={[rowId, index2]} value={subitem} key={{ subitem, index2 }} board={initedBoard}></Field>\n                  );\n                })\n              }\n            </div>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nfunction Lives(props) {\n\n  function initHearts() {\n    let hearts = '';\n    for (let i = 0; i < props.heartNumber; i++) {\n      hearts += '❤';\n    }\n    return hearts;\n  }\n\n  return (\n    <div>\n      {\n        initHearts()\n      }\n    </div>\n  );\n}\nfunction GameResults(props) {\n  return (\n    <div>\n      {props.result}\n    </div>\n  );\n}\n\nfunction StartGameButton(props) {\n  let restartGameClick = function () {\n\n  }\n  return (\n    <button onClick={restartGameClick}>Restart Game</button>\n  );\n}\n\nfunction Toolbar(props) {\n  let restartGameClick = function () {\n\n  }\n  return (\n    <div>\n      <GameResults result={props.result}></GameResults>\n      <Lives heartNumber={props.hearts}></Lives>\n    </div>\n  );\n}\n\nfunction TipsLeft(props) {\n  const currentGame = props.currentGame;\n  const emptyBoard = generateEmptyBoard(10, 5);\n  const initedTipsLeft = emptyBoard.map((row, rowIndex) => {\n    let sum = 0;\n    const resultArray = [];\n    for (let i = 0; i < currentGame.length; i++) {\n      if (currentGame[rowIndex][i].isFilled) {\n        sum++;\n        if (i === currentGame.length - 1) {\n          resultArray.push(sum);\n        }\n      } else {\n        resultArray.push(sum);\n        sum = 0;\n      }\n    }\n    let idx = 0;\n    while (idx > -1) {\n      idx = resultArray.indexOf(0);\n      if (idx > -1) {\n        resultArray.splice(idx, 1);\n      }\n    }\n    for (let i = resultArray.length; i < 5; i++) {\n      resultArray.unshift('');\n    }\n    return resultArray;\n  });\n  return (\n    <div>\n      {\n        initedTipsLeft.map((item) => {\n          return (\n            <div className=\"row\">\n              {\n                item.map((subitem, index2) => {\n                  return (\n                    <Tip classN=\"tip-field\" value={subitem} key={index2}></Tip>\n                  );\n                })\n              }\n            </div>\n          )\n        })\n      }\n\n    </div>\n  );\n}\n\nfunction TipsUpper(props) {\n  const currentGame = props.currentGame;\n  const emptyBoard = generateEmptyBoard(5, 10);\n  const initedTipsUpper = emptyBoard[0].map((row, rowIndex) => {\n    let sum = 0;\n    const resultArray = [];\n    for (let i = 0; i < currentGame.length; i++) {\n      if (currentGame[i][rowIndex].isFilled) {\n        sum++;\n        if (i === currentGame.length - 1) {\n          resultArray.push(sum);\n        }\n      } else {\n        resultArray.push(sum);\n        sum = 0;\n      }\n    }\n    let idx = 0;\n    while (idx > -1) {\n      idx = resultArray.indexOf(0);\n      if (idx > -1) {\n        resultArray.splice(idx, 1);\n      }\n    }\n    for (let i = resultArray.length; i < 5; i++) {\n      resultArray.unshift('');\n    }\n    return resultArray;\n  });\n  initedTipsUpper.reverse();\n  return (\n    <div className=\"right\">\n      <div className=\"rotated\">\n        {\n          initedTipsUpper.map((item) => {\n            return (\n              <div className=\"row\">\n                {\n                  item.map((subitem, index2) => {\n                    return (\n                      <Tip classN=\" tip-field innerRotated\" value={subitem} key={index2}></Tip>\n                    );\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nfunction Theme(props){\n  return(\n    <div>\n      <details>\n      <summary>Themes</summary>\n      <button className='theme1' onClick='setTheme(1)'>Theme1</button>\n      <button className='theme2' onClick='setTheme(2)'>Theme1</button>\n      <button className='theme3' onClick='setTheme(3)'>Theme1</button>\n      <button className='theme4' onClick='setTheme(4)'>Theme1</button>\n      <button className='theme5' onClick='setTheme(5)'>Theme1</button>\n      </details>\n    </div>\n  );\n}\n\nfunction NonoGame(props) {\n  const [result, setResult] = useState(\"game started\");\n  const emptyBoard = generateEmptyBoard(10, 10);\n  const initBoard = function () {\n    return (\n      emptyBoard.map((row) => {\n        return row.map(() => {\n          return ({\n            isFilled: randomBool(),\n            isUncovered: false,\n            class: ''\n          });\n        }\n        )\n      })\n    );\n  }\n  const [currentNumberOfHearts, setHearts] = useState(LIVES_INIT);\n  const [stateOfGame, setStateOfGame] = useState('start');\n  const [initedBoard, setInitedBoard] = useState(() => {\n    return initBoard();\n  });\n\n  let restartGameClick = function () {\n    if (stateOfGame === 'start') {\n      setStateOfGame('start2');\n    } else {\n      setStateOfGame('start');\n    }\n    setInitedBoard(initBoard());\n    setHearts(LIVES_INIT)\n    setResult('game started');\n  }\n\n  const handleLives = function (value) {\n    if (value === 0) {\n\n    } else {\n\n      setHearts(currentNumberOfHearts + value);\n      if (currentNumberOfHearts === 1) {\n        setStateOfGame('gameover');\n      }\n    }\n  }\n  return ( // tu musi to być wpakowane w div, bo moze być tylko jeden parent element\n    <div className=\"game\">\n      <div className=\"row right\">\n        <TipsUpper currentGame={initedBoard}></TipsUpper>\n      </div>\n      <div className=\"row\">\n        <TipsLeft currentGame={initedBoard}></TipsLeft>\n        <Board key={initedBoard, stateOfGame} setResult={setResult} currentGame={initedBoard} gameState={stateOfGame} upperChangeLives={handleLives}></Board>\n      </div><Toolbar result={result} hearts={currentNumberOfHearts}></Toolbar>\n      <button className=\"blue-pink\" onClick={restartGameClick}>restart</button>\n      <Theme></Theme>\n    </div>\n\n  );\n}\n\nexport default NonoGame;\n\nfunction generateEmptyBoard(sizeX, sizeY) {\n  return Array(sizeX).fill(Array(sizeY).fill());\n}\nfunction randomBool() {\n  return (Math.random() < 0.5);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NonoGame from './NonoGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <NonoGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}